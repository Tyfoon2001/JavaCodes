Java EE
	It is a specification (Set of Rules) which
	is implemented by some web server like
	Tomcat or application server like JBoss, 
	WebLogic, WebSphere etc.
		

Frameworks:
	In modern Java programming model, frameworks
	play vital role.

	Framework:
		A partial solution used to address
		common problems.

		It provides its own library as well
		as workflow.

	There are 2 popular Java Based frameworks:
		1. Hibernate
		2. Spring

Hibernate:
	An open source Java Based framework used to
	handle data persistency.

	It uses JDBC as an underlying API for Data
	Persistency.

	Hibernate Framework is based upon ORM.

	ORM stands for Object to Relational Mapping.
	It is a set of principles.

	ORM Principles:
	1. Automated Persistence
		Developer can handle CRUD operations
		without writing SQL queries.

		The boiler-plate code is taken away
		from the developer.

	2. Persistence through Mapping Metadata
		The data persistency is handled using
		some mapping information (metadata).

	3. Querying without tables and columns;
	   rather it is done using classes and their
	   fields.

	4. Performance Optimization through several
	   techniques like Caching, Fetching etc.

	Any framework that follows all these principles
	is known as ORM framework.

	There are several ORM frameworks available:
	E.g.
		Hibernate
		Toplink
		Eclipselink
		IBatis

Hibernate Core API:
	Hibernate's Core API mainly consists of:
		1. Session
		2. SessionFactory
		3. Configuration
		4. Transaction
		5. Query

	Session:
	An interface from org.hibernate package.
	It is a lightweight object required to perform
	any CRUD operation.

	SessionFactory:
	An interface from org.hibernate package.
	It is a heavyweight object required to obtain
	Session.
	It is recommended to have only single instance
	per application. 

	Configuration:
	It is a class from org.hibernate.cfg package.
	It is used to configure Hibernate based upon
	some metadata.
	It is also used to obtain SessionFactory.

	Transaction:
	An interface from org.hibernate package.
	Used to manage transactions.
	Maintains atomicity.

	Query:
	An interface from org.hibernate.query package.
	It is used to perform query operations for
	loading the data.

	Metadata in Hibernate:
	In Hibernate, metadata is of 2 types:
		1. Mapping Specific
		2. Configuration Specific

	Mapping Specific:
	This specifies the mappings between Java Classes
	and the Relational Database Tables as well as
	Class Fields and Table Columns and so on.

	This can be done by 2 ways:
		1. Using XML File
		2. Using Annotations

	In case of XML file, by convention, its name
	is [Entity-Class-Name].hbm.xml.

	This file is referred as HBM file.
	HBM --> Hibernate Mapping

	Configuration Specific:
	This specifies the Database specific configuration
	settings using which Hibernate can establish
	connection with the database.

	It is referred as CFG file.
	By default, it is hibernate.cfg.xml

First Example Steps:
 1. Install all the Hibernate specific JARs and
	MySQL Type 4 Jar.
	There are 2 ways to install these JARs.	
	a) Download them manually from Internet.
	b) Download them using some build tools
	   like Maven, Gradle etc.

	Maven is one of the popular build tools used
	for managing project build life cycle, project
	dependencies and so on.

	Create a Maven based project.
	Setup the JDK environment as per the requirement
	Add Hibernate's Core Maven Dependency
	Add MySQL Type 4 Driver Dependency

2. Create an Entity Class.
	Declare fields, define constructors, getters
	and setters, toString() and so on.

3. Provide Mapping File (HBM File)
	As per the convention, this file must have
	name: [Entity-Class-Name].hbm.xml and it has
	to be placed under 'src/main/resources' folder.

	While declaring any class as an entity to 
	Hibernate, it requires at least one field from
	the relevant class as an identity.

4. Provide Configuration File (CFG File)
	By default, Hibernate refers to hibernate.cfg.xml file.
	This file consists of Database configurations
	along with some hibernate configurations as well.
	it has to be placed under 'src/main/resources'
	folder.

5. Create Main Class
	a) Configure Hibernate.
		This is done by instantiating 
		'Configuration' class.
	b) Obtain SessionFactory
		This is done using 'buildSessionFactory()'
		method of 'Configuration' class.

	c) Obtain Session
		This is done using 'openSession()'
		method of 'SessionFactory' interface.

	d) Create an Entity Class object.

	e) Obtain and Start the Transaction.
		This is done using 'beginTransaction()'
		method of 'Session' interface.
	
	f) Store the Entity Class Object.
		This is done using persist() method
		of 'Session' interface.

	g) Commit the Transaction.
		This is done using commit() method
		of 'Transaction' interface.

	h) Close the Session.
		This is done using Session's close() method.

	i) Close the SessionFactory.
		This is done using SessionFactory's close() method.

Hibernate Application Workflow:
	In Hibernate, there are 2 ways to provide configuration
	metadata using some file.
		1. Using .properties file
		2. Using .xml file
	
	The standard names used by Hibernate for the above
	files are 'hibernate.properties' and
	'hibernate.cfg.xml' respectively.
	
	When 'Configuration' class object is created,
	Hibernate looks for the configuration metadata 
	inside 'hibernate.properties' file.
	
	If available, loads entries from that file.
	
	If it is not available and the respective entries
	are available inside 'hibernate.cfg.xml' file, 
	it is necessary to intimate Hibernate about this.
	This is done using 'configure()' method.
	
	If the XML file name is other than 'hibernate.cfg.xml',
	then overloaded 'configure()' method has to be used.

Instance States:
	The instance of an entity class is in one of the several
	states which are associated with Persistence Context.
	
	Persistence Context is the single object that is 
	solely responsible for handling persistence related
	operations.
	
	In JDBC it is Connection and in Hibernate it is Session.

	There are mainly 3 instance states:
		1. Transient
		2. Managed (Persistent)
		3. Detached
		
	Transient:
		In this state, the instance is not yet associated
		with Persistence Context.
		Therefore, the instance does not have its own
		identity.
		
	Managed (Persistent):
		Once the instance is associated with Persistence
		Context, it becomes Managed or Persistent.
		
		In this case, the instance has its own identity.
	
	Detached:
		The instance which was associated with Persistence
		Context but the context is closed; then the instance
		becomes detached.
		
	To reflect changes made within the instance towards
	database, the instance has to be in Managed state.
	
Hibernate and JDBC:
	Hibernate is an abstraction on the top of JDBC.
	Therefore Session of Hibernate is also an abstraction
	on the top of JDBC Connection.
	
	There are 2 more APIs used by Hibernate internally:
		1. ConnectionProvider
		2. TransactionFactory
		
	ConnectionProvider:
		Accepts request from SessionFactory and provides
		Connection to it.
		
	TransactionFactory:
		Accepts request from Session and returns Transaction.

Hibernate without XML:
	In any Hibernate based application, there are 2 
	types of metadata:
		Mapping and Configuration
	
	In both cases, it is possible to discard XML files.
	
	Mapping without XML:
		It is possible to discard XML file for handling
		mapping metadata through Annotations.
		
		Annotation based metadata is further divided 
		into 2 types:
			1. Hibernate Annotations
			2. JPA Annotations
		
		Hibernate Annotations:
			These are the annotations given by Hibernate
			itself.
			
			It is a separate Annotation specific library.
			
		JPA Annotations:
			These are the annotations given by JPA.
			JPA stands for Jakarta Persistence API.
			It is a Specification i.e. Set of Rules.
			It is implemented by several ORM frameworks
			like Hibernate, Toplink, Eclipselink, IBatis 
			and so on.
			
			Therefore, JPA is an abstraction on the top of
			some ORM.
			
			JPA Annotations:
				In the context of JPA Annotations, a class 
				is to be declared as an Entity class using
				@Entity annotation. 
				It is to be applied at the class level.
				
				Once the class is declared as an Entity class,
				it needs to be mapped with the database table.
				
				This is done using @Table annotation.
				It is to be applied at the class level.
				
				Once the class and table mapping is done, it
				is necessary to map fields with columns and
				declare at least 1 field as an identity.
				
				ID field is declared using @Id annotation.
				It can be applied either at the field level
				or at the getter method level of that field.
				
				The field is to be mapped with the column using
				@Column annotation.
				It can be applied either at the field level
				or at the getter method level of that field.
				
				Even though @Id and @Column can be applied either
				at field level or getter method level, it is not
				possible to mix the targets.
				
				All these annotations must have same target.
				
				Out of the 4 main annotations, @Entity and @Id
				are mandatory whereas @Table and @Column are optional.
				
				If @Table is omitted, by default it is taken same as
				that of the class name.
				
				If @Column is omitted, by default it is taken same as
				that of the field name.

		Configuration without XML:
			Instead of configuring the database specific properties
			using XML or PROPERTIES file, it can be done programmatically.

			To handle the configuration programmatically, 'Configuration'
			class is used.
			
			It provides 2 relevant methods:
				1. setProperty(String, String) --> name, value
				2. setProperties(java.util.Properties)

Data Retrieval:
	Instead of storing the data, sometimes it is required to 
	retrieve the data from database.
	
	This is done by 2 variants:
		1. Retrieve single value
		2. Retrieve multiple values
		
	Retrieving single value:
		This is generally done against ID because ID
		is unique.
		It guarantees that one and only one value gets
		returned.
		
		This is possible using 'find()' method.
		
		Since this is not a DML operation, 'Transaction'
		is not required.
		
		The 'find()' method is used to find a specific entity value
		based upon 2 things:
			1. Entity Class Type
			2. Entity ID
			
		The entity class type is mentioned using 'Class' 
		class reference.
		
		The entity ID is mentioned using 'java.io.Serializable'
		interface reference.
		
		This is because, in Hibernate, the fields which are
		declared as identity, their type must be 'Serializable'.
		
		Therefore, the 'find()' method has following signature:
			find(Class, Serializable)
			
Updating the Record:
	To update the record, first it is necessary to 
	load the specific entity in which updation is required.
	
	This is done using finding by Id.
	
	Once the entity is loaded, updations can be done by
	calling relevant setter methods.
	
	After setters have been invoked, changes will be made into
	object's state but not in the database.
	
	To reflect these changes, transaction has to be 
	committed.
	
	This is because, the instance that is loaded using
	'find()' method, already comes into MANAGED (PERSISTENT)
	state.
	
	It means that any changes made within this instance, are
	reflected into the database once the transaction is
	committed.
	
Deleting the Record:
	To delete the record, first it is necessary to load the
	entity that is to be deleted.
	
	This is done using finding by Id.
	
	To perform deletion, Transaction is required because it is 
	a DML operation.
	
	To actually delete the entity, remove() method 
	is used.
	
	The changes are applied when transaction is committed.

Re-attachment:
	When the persistence context (Session) is closed,
	the entity which was in the MANAGED (PERSISTENT) state,
	becomes DETACHED.
	
	Sometimes, it is necessary to make changes in the entity which
	is already DETACHED.
	
	This approach is generally useful for long running
	transactions.
	
	Once the work is done, the new state needs to be reflected
	back into the database.
	
	For this, the entity must be in PERSISTENT state.
	If it is already in DETACHED state, it must be brought
	back into PERSISTENT state.
	
	This is known as Re-attachment.
	It is done using 'merge()' method of 'Session'
	interface.
	
TODO 1:
	Create an entity class: Stock to handle
	Stock related information as per the following:
		stock id (Numeric) Unique
		name (Character)
		price (Numeric)
	
	Create another entity class: StockHolder to handle
	Stock Holder related information as per the following:
		demat account no (Numeric) Unique
		name (Character)
		email (Character)
		
	Handle Annotation based mapping.
	Handle Programmatic configuration.
	
	Implement CRUD operations for both these entities.
	




		




	